package main

import (
	"encoding/json"
	"errors"
	"flag"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strconv"

	"github.com/UD94/SecondOP/Common"
	"github.com/UD94/SecondOP/Function"
	"github.com/go-ini/ini"
)

var channel_password string

type AutoGenerated struct {
	Password string   `json:"Password"`
	Doldfile bool     `json:"Doldfile"`
	Action   string   `json:"Action"`
	Type     string   `json:"type"`
	Content  []string `json:"Content"`
}

type ResponseJson struct {
	Code    int      `json:"code"`
	Content []string `json:"Content"`
}

type Line struct {
	X  float64 `json:"x"`
	Y  float64 `json:"y"`
	SP int     `json:"sp"`
	AG int     `json:"ag"`
	TM int     `json:"tm"`
}

func HandlePostJson(w http.ResponseWriter, r *http.Request) {
	// 根据请求body创建一个json解析器实例
	var get_result AutoGenerated
	var ResponseString ResponseJson
	data, err := ioutil.ReadAll(r.Body)

	json.Unmarshal(data, &get_result)
	if err != nil {
		return
	}

	if get_result.Password != channel_password {
		ResponseString.Code = 5
		ResponseString.Content = append(ResponseString.Content, "access denied")

	} else {
		switch get_result.Action {
		case "dnsresolvr":
			go Function.Dns_thread(get_result.Content[0])

			go Function.Google_domain(get_result.Content[0])
			ResponseString.Code = 0
		case "config":
			_, err := Config_Workstation(get_result.Type, get_result.Content, get_result.Doldfile)
			if err != nil {
				ResponseString.Code = 11
				ResponseString.Content = append(ResponseString.Content, "config failed")
			} else {

				ResponseString.Code = 0
				ResponseString.Content = append(ResponseString.Content, "success")
			}

		case "md5":
			result, err := Function.Md5_query(get_result.Content[0])
			if err != nil {
				switch result {
				case "nopass":

					ResponseString.Code = 7
					ResponseString.Content = append(ResponseString.Content, "not found")
				case "nodatabse":

					ResponseString.Code = 8
					ResponseString.Content = append(ResponseString.Content, "database not ready")
				}
			} else {
				ResponseString.Code = 0
				ResponseString.Content = append(ResponseString.Content, result)
			}

		case "analysis":
			switch get_result.Type {
			case "nmap":
				Function.Nmap()
			case "fscan":
				Function.Fscan()
			case "mimikatz":
				Function.Mimikatz(get_result.Content)
			}
		case "subhack":
			Function.Subhackdomain()

		case "downloadjob":
			file, _ := os.Open("Cache\\" + get_result.Content[0])
			defer file.Close()

			fileHeader := make([]byte, 512)
			file.Read(fileHeader)

			fileStat, _ := file.Stat()

			w.Header().Set("Content-Disposition", "attachment; filename="+get_result.Content[0])
			w.Header().Set("Content-Type", http.DetectContentType(fileHeader))
			w.Header().Set("Content-Length", strconv.FormatInt(fileStat.Size(), 10))

			file.Seek(0, 0)
			io.Copy(w, file)

			ResponseString.Code = 0

		case "line":

			lists := [8]Line{{116.478928, 39.997761, 19, 0, 1478031031}, {116.478907, 39.998422, 10, 0, 2}, {116.479384, 39.998546, 10, 110, 3}, {116.481053, 39.998204, 10, 120, 4}, {116.481793, 39.997868, 10, 120, 5}, {116.482898, 39.998217, 10, 30, 6}, {116.483789, 39.999063, 10, 30, 7}, {116.484674, 39.999844, 10, 30, 8}}

			Function.RenderHTML(w, "line.html", lists)
		default:

			files, err := ioutil.ReadDir(`Cache`)
			if err != nil {
				panic(err)
			}
			ResponseString.Code = 0
			for _, v := range files {
				ResponseString.Content = append(ResponseString.Content, v.Name())
			}

		}

	}
	response, _ := json.Marshal(ResponseString)
	fmt.Fprint(w, string(response))

}

func Config_Workstation(configtype string, content []string, Doldfile bool) (string, error) {
	cfg, err := ini.Load("config.ini")

	if err != nil {
		fmt.Printf("Load config error")

	}
	switch configtype {
	case "dnsdomainconfig":
		if Doldfile {
			Common.DeleteFile("domain.txt")
		}
		for _, s := range content {
			Common.Write_result(s+"\n", "domain.txt")
		}
	case "androidonline":
		_, err := Function.MD5_insert(content[0], content[1])
		if err != nil {
			return "insert md5 error", errors.New("md5configerror")
		}
	case "md5config":
		int2, _ := strconv.Atoi(content[2])
		x, _ := strconv.ParseFloat(content[0], 64)
		y, _ := strconv.ParseFloat(content[1], 64)
		_, err := Function.Lineinsert(x, y, int2, content[3])
		if err != nil {
			return "insert md5 error", errors.New("md5configerror")
		}
	case "server":
		cfg.Section("mysql").Key("ip").SetValue(content[0])
		cfg.Section("mysql").Key("port").SetValue(content[1])
		cfg.Section("mysql").Key("user").SetValue(content[2])
		cfg.Section("mysql").Key("password").SetValue(content[3])
		cfg.Section("mysql").Key("database").SetValue(content[4])

	case "communicationconfig":
		channel_password = content[0]
	default:
		return "noconfig", errors.New("not config")
	}
	return "success", nil
}

func Starthttps(ip string) {
	http.HandleFunc("/post", HandlePostJson)

	err := http.ListenAndServeTLS(ip+":4321", "server.crt", "server.key", nil)
	if err != nil {
		log.Fatal("listen error:", err.Error())
	}
}

func main() {

	var ip string
	flag.StringVar(&channel_password, "p", "ud94iscreater", "连接密码，默认为ud94iscreater")
	flag.StringVar(&ip, "i", "0.0.0.0", "监听ip，默认为0.0.0.0")
	flag.Parse()
	Starthttps(ip)

}
